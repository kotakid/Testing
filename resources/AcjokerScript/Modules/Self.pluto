local Tables = require 'resources/AcjokerScript/ACJSTables'
local Globals = require 'resources/AcjokerScript/Modules/Globals'
local func = require 'resources/AcjokerScript/Modules/Functions'
local json = require 'pretty.json'
local CONFIG_DIR = filesystem.resources_dir() .. 'AcjokerScript\\'
local SettingsDir = CONFIG_DIR..'Settings\\'
if filesystem.is_dir(CONFIG_DIR..'Death Log\\') then
    os.rename(CONFIG_DIR..'Death Log\\', CONFIG_DIR..'Settings\\')
else
    filesystem.mkdirs(SettingsDir)
end
local Death_Log = SettingsDir .. "Death_Log.txt"
if filesystem.is_regular_file(CONFIG_DIR .. "Pets_List.json") then
    os.rename(CONFIG_DIR .. "Pets_List.json", SettingsDir.."Pets_List.json")
    Pets_List = SettingsDir.."Pets_List.json"
else
    Pets_List = SettingsDir.. "Pets_List.json"
end
local selfroot = menu.my_root():list(T('Self'), {}, '')

local alphas = {0, 51, 102, 153, 204, 255}
local menus = {}

local function getWaterHeightInclRivers(pos_x, pos_y, z_hint = 200.0) --OP function from aaronlink127#0127
    local outHeight = memory.alloc(4)
    if TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(pos_x, pos_y, z_hint, 0, outHeight) ~= 0 then
        return memory.read_float(outHeight)
    end
end

local pet_tab = {}
local function Petcreate(hash, pos)
    hash = util.joaat(hash)
    func.Streament(hash)
    local pet = entities.create_ped(1, hash, pos, 0)
    SET_ENTITY_INVINCIBLE(pet, true)
    SET_PED_COMBAT_ABILITY(pet, 2)
    SET_PED_RANDOM_PROPS(pet)
    SET_PED_COMBAT_ATTRIBUTES(pet, 5, true)--always fight
    SET_PED_COMBAT_ATTRIBUTES(pet, 21, true)--can chase
    SET_PED_COMBAT_ATTRIBUTES(pet, 27, true)--dis bull react
    SET_PED_COMBAT_ATTRIBUTES(pet, 58, true)--disable flee
    return pet
end

local pt_tb = {}
local function Petfollow(pet)
    local tar1 = GET_ENTITY_COORDS(pet, true)
    local pt_lis = {}
    table.insert(pt_lis, pet)
    func.SetEntCoor(tar1, pt_lis)

    local pg = GET_PED_GROUP_INDEX(players.user_ped())
    for pt_lis as pet do
        SET_PED_AS_GROUP_MEMBER(pet, pg)
        SET_PED_AS_GROUP_LEADER(players.user_ped(), pg)
        SET_GROUP_SEPARATION_RANGE(pg, 9999.0)
        SET_GROUP_FORMATION_SPACING(pg, 1.0, -1.0, -1.0)
        SET_GROUP_FORMATION(pg, Pet_formation)
        SET_PED_CAN_BE_TARGETTED_BY_TEAM(pet, pg, false)
        SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(players.user_ped(), false, pg)
        func.AddBlip(pet, 1, 3)
        SET_CAN_ATTACK_FRIENDLY(pet, false, false)
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pet, true)
        TASK_COMBAT_HATED_TARGETS_AROUND_PED(pet, 300.0, 0)
        entities.set_can_migrate(entities.handle_to_pointer(pet), false)
        table.insert(pet_tab,  pet)
    end
    pt_tb = pet_tab
    for pet_tab as pet do
        SET_PED_CAN_BE_TARGETTED_BY_PLAYER(pet, players.user_ped(), false)
        SET_PED_CONFIG_FLAG(pet, 13, true)--never leave group
        SET_PED_CONFIG_FLAG(pet, 42, true)--dont influence wanted
        SET_PED_CONFIG_FLAG(pet, 140, false)--can atk friendly
        SET_PED_CONFIG_FLAG(pet, 273, true)--climb shift fence
        SET_PED_CONFIG_FLAG(pet, 281, true)--no Writhe
        SET_PED_CONFIG_FLAG(pet, 294, true)--disable shock
        util.yield(150)
    end
end




----------------------------------------------------------------------------------------------------------------
menus.thanos = selfroot:list(T('Thanos Snap'), {}, T('Clear out everything around you by a percentage'))
local thanos_set = {perc = 0.5, notify = true}
local function Thanos(percentage)
    local percvehs = math.ceil(#entities.get_all_vehicles_as_pointers() * percentage)
    if #entities.get_all_vehicles_as_pointers() >= percvehs then
        local vehs = entities.get_all_vehicles_as_handles()
        for vehs as veh do
            if veh == entities.get_user_vehicle_as_handle() then 
                continue
            else
                if DOES_ENTITY_EXIST(veh) then
                    entities.delete(veh)
                end
                if percvehs == #entities.get_all_vehicles_as_pointers() then break end
            end
        end
    end
    local percpeds = math.ceil(#entities.get_all_peds_as_pointers() * percentage)
    if #entities.get_all_peds_as_pointers() >= percpeds then
        local peds = entities.get_all_peds_as_handles()
        for peds as ped do
            if DOES_ENTITY_EXIST(ped) then
                entities.delete(ped)
            end
            if percpeds == #entities.get_all_peds_as_pointers() then break end
        end
    end
    local percobjs = math.ceil(#entities.get_all_objects_as_pointers() * percentage)
    if #entities.get_all_objects_as_pointers() >= percobjs then
        local objs = entities.get_all_objects_as_handles()
        for objs as obj do
            if DOES_ENTITY_EXIST(obj) then
                entities.delete(obj)
            end
            if percobjs == #entities.get_all_objects_as_pointers() then break end
        end
    end
    if func.set.alert then
        func.ACutil(Str_trans('SNAP'))
    end
end

menus.thanos:action(T('Thanos Snap'), {'tsnap'}, T('Clear out everything around you by a percentage'), function ()
    Thanos(thanos_set.perc)
end)

menus.thanos:slider(T('Percentage'), {}, T('Choose the percentage of stuff that gets deleted with a snap'), 25, 100, 50, 25, function (s)
    thanos_set.perc = s*0.01
end)




menus.forcefield = selfroot:list(T('Forcefield'), {}, T('Apply a forcefield around yourself'))--inspired from saltyscript

local forcefield_set = {distance = 1, magnitude = 100}
menus.forcefield:toggle_loop(T('Forcefield'), {}, T('Apply a forcefield around yourself'), function ()
    local pos = GET_ENTITY_COORDS(players.user_ped())
    local ents_tab = {}
    local cars_tab = entities.get_all_vehicles_as_pointers()
    local peds_tab = entities.get_all_peds_as_pointers()

    for cars_tab as cars do
        local car_pos = entities.get_position(cars)
        if v3.distance(pos, car_pos) <= forcefield_set.distance then
            table.insert(ents_tab, cars)
        end
    end
    for peds_tab as peds do
        local ped_pos = entities.get_position(peds)
        if v3.distance(pos, ped_pos) <= forcefield_set.distance and not IS_PED_A_PLAYER(entities.pointer_to_handle(peds)) then
            table.insert(ents_tab, peds)
        end
    end
    for ents_tab as ents do
        local ent = entities.pointer_to_handle(ents)
        local force_coords = GET_ENTITY_COORDS(ent)
        v3.sub(force_coords, pos)
        v3.normalise(force_coords)
        v3.mul(force_coords, forcefield_set.magnitude)
        func.Getent(ent)
        APPLY_FORCE_TO_ENTITY(ent, 1, force_coords.x, force_coords.y, force_coords.z, 0, 0, 0.5, 0, false, false, true, false, false)
    end
end)

local frgb = {color= {r= 0, g = 1, b = 0, a = 0.01}}
local forcefield_dis = menus.forcefield:slider_float(T('Forcefield Distance'), {}, T('Change the distance of the forcefield'), 100, 10000, 1000, 100, function(s)
    forcefield_set.distance = s*0.01
end)

menus.forcefield:colour(T('Sphere Color'), {}, T('Choose the Box color to be changed to'), frgb.color, false, function(scolor)
    frgb.color = scolor
end)
local force_dis
forcefield_dis:onFocus(function ()
    force_dis = true
    util.create_tick_handler(function ()
        local pos = GET_ENTITY_COORDS(players.user_ped())
        local color = {
        r = math.floor(frgb.color.r * 255),
        g = math.floor(frgb.color.g * 255),
        b = math.floor(frgb.color.b * 255),
        }
        util.toast('drawing Sphere')
        DRAW_MARKER_SPHERE(pos.x, pos.y, pos.z, forcefield_set.distance, color.r, color.g, color.b, 0.5)
        if not force_dis then return false end
    end)
end)
forcefield_dis:onBlur(function ()
    force_dis = false
end)

menus.forcefield:slider_float(T('Forcefield Magnitude'), {}, T('Change the magnitude of the forcefield'), 100, 100000, 10000, 100, function(s)
    forcefield_set.magnitude = s*0.01
    func.ACutil(forcefield_set.magnitude)
end)


local appear = selfroot:list(T('Appearance'), {}, T('Change your apperance'))
appear:slider(T('Set Player Alpha'), {}, T('Set your player transparent'), 0, 100, 100, 20, function (s)
    SET_ENTITY_ALPHA(players.user_ped(), alphas[s / 20 + 1], false)
end)

Clone_player = {}
local pclone = appear:list(T('Player Clone'), {}, '')
pclone:toggle_loop(T('Player Clone'), {'Playerclone'}, T('Clone Player by pointing at them'), function ()
    local targetEntity
    if util.is_session_started() then
        if func.Is_player_pointing() then
            if not menus.clonemenu.value then
                menus.clonemenu.value = true
                func.ACutil(Str_trans('No Revert Clone has been made making one now (will show as friend on the map)'))
            end
            local raycastResult = func.Get_raycast_result(500.0, 8)
            if raycastResult.didHit and DOES_ENTITY_EXIST(raycastResult.hitEntity) then
                targetEntity = raycastResult.hitEntity
            end
            if IS_MODEL_A_PED(GET_ENTITY_MODEL(targetEntity)) then
                if IS_PED_A_PLAYER(targetEntity) then
                    local hash = util.reverse_joaat(GET_ENTITY_MODEL(targetEntity))
                    if hash == 'mp_f_freemode_01' then
                        menu.trigger_commands('mpfemale')
                    elseif hash == 'mp_m_freemode_01' then
                        menu.trigger_commands('mpmale')
                    end
                    util.yield(250)
                    CLONE_PED_TO_TARGET(targetEntity, players.user_ped())
                    func.ACutil(Str_trans('Player Cloned'))
                    targetEntity = nil
                end
                for Clone_player as player do
                    local pos1 = GET_ENTITY_COORDS(player)
                    local pos2 = GET_ENTITY_COORDS(players.user_ped())
                    local disbet = VDIST2(pos2.x, pos2.y, pos2.z, pos1.x, pos1.y, pos1.z)
                    if DOES_ENTITY_EXIST(player) and disbet < 5 then
                        if GET_PACKED_STAT_INT_CODE(386, util.get_char_slot()) == 1 then
                            menu.trigger_commands('mpfemale')
                        elseif GET_PACKED_STAT_INT_CODE(386, util.get_char_slot()) == 0 then
                            menu.trigger_commands('mpmale')
                        end
                        util.yield(250)
                        CLONE_PED_TO_TARGET(targetEntity, players.user_ped())
                        func.ACutil(Str_trans('Reverted back to original'))
                        SET_ENTITY_VISIBLE(targetEntity, false)
                        SET_ENTITY_COLLISION(targetEntity, false, 0)
                        SET_ENTITY_COORDS(targetEntity, pos2.x + 250, pos2.y + 250, pos2.z, false, true, true, false)
                        targetEntity = nil
                    end
                end
            end
        else
            targetEntity = nil
            util.yield()   
        end
    else
        util.yield()   
    end
    
end, function ()
    targetEntity = nil
end)

menus.clonemenu = pclone:toggle(T('Clone Current Ped Model'), {'clonecur'}, T('Clone your current Ped to be able to revert back to it (clone will disappear and appear as friend on the map teleport them back to bring them back)'), function (on)
    if util.is_session_started() then
        if on then
            local player = players.user_ped()
            local hash
            if GET_PACKED_STAT_INT_CODE(386, util.get_char_slot()) == 1 then
                hash = 'mp_f_freemode_01'
            elseif GET_PACKED_STAT_INT_CODE(386, util.get_char_slot()) == 0 then
                hash = 'mp_m_freemode_01'
            end
            local loc = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(player, 1, 1, -1)
            local pedhash = util.joaat(hash)
            func.Streament(pedhash)
            local clone_ped = func.Pedspawn(pedhash, loc)
            entities.set_can_migrate(entities.handle_to_pointer(clone_ped), false)
            CLONE_PED_TO_TARGET(player, clone_ped)
            util.yield(1000)
            SET_ENTITY_VISIBLE(clone_ped, false)
            SET_ENTITY_COLLISION(clone_ped, false, 0)
            local curloc = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0, 1, -1)
            func.AddBlip(clone_ped, 1, 3)
            SET_ENTITY_COORDS(clone_ped, curloc.x + 250, curloc.y + 250, curloc.z, false, true, true, false)
            table.insert(Clone_player, clone_ped)
        else
            func.DelEnt(Clone_player)
        end
    else
        menus.clonemenu.value = false
    end
end)



pclone:action(T('Teleport to me'), {'teleclone'}, T('Teleport the clone you made back to you'), function ()
    local curloc = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0, 1, -1)
    for Clone_player as player do
        GET_ENTITY_COORDS(player)
        SET_ENTITY_COORDS(player, curloc.x, curloc.y, curloc.z, false, true, true, false)
        SET_ENTITY_VISIBLE(player, true)
        SET_ENTITY_COLLISION(player, true, 0)
    end
end)

pclone:action(T('Delete Clone'), {}, T('Once Deleted you must make a new one'), function ()
    menus.clonemenu.value = false
    func.DelEnt(Clone_player)
end)

Clone_ped = {}
local pedclone = appear:list(T('NPC Clone'), {'npcclone'}, '')
pedclone:toggle_loop(T('NPC Clone'), {'NPC clone'}, T('Clone Player by pointing at them'), function ()
    local targetEntity
        if func.Is_player_pointing() then
            if not menus.clonemenu.value then
                menus.clonemenu.value = true
                func.ACutil(Str_trans('No Revert Clone has been made making one now (will show as friend on the map)'))
            end
            local raycastResult = func.Get_raycast_result(500.0, 8)
            if raycastResult.didHit and DOES_ENTITY_EXIST(raycastResult.hitEntity) then
                targetEntity = raycastResult.hitEntity
            end
            if IS_MODEL_A_PED(GET_ENTITY_MODEL(targetEntity)) then
                if not IS_PED_A_PLAYER(targetEntity) then
                    local hash = util.reverse_joaat(GET_ENTITY_MODEL(targetEntity))
                    if hash != 'mp_m_freemode_01' and hash != 'mp_f_freemode_01' then
                        local name = hash:gsub("_", "")
                        menu.trigger_commands(name)
                        CLONE_PED_TO_TARGET(targetEntity, players.user_ped())
                        func.ACutil(Str_trans('Ped Cloned'))
                        targetEntity = nil
                    end
                end
                for Clone_player as player do
                    local pos1 = GET_ENTITY_COORDS(player)
                    local pos2 = GET_ENTITY_COORDS(players.user_ped())
                    local disbet = VDIST2(pos2.x, pos2.y, pos2.z, pos1.x, pos1.y, pos1.z)
                    if DOES_ENTITY_EXIST(player) and disbet < 5 then
                        if GET_PACKED_STAT_INT_CODE(386, util.get_char_slot()) == 1 then
                            menu.trigger_commands('mpfemale')
                        elseif GET_PACKED_STAT_INT_CODE(386, util.get_char_slot()) == 0 then
                            menu.trigger_commands('mpmale')
                        end
                        util.yield(250)
                        CLONE_PED_TO_TARGET(targetEntity, players.user_ped())
                        func.ACutil(Str_trans('Reverted back to original'))
                        SET_ENTITY_VISIBLE(targetEntity, false)
                        SET_ENTITY_COLLISION(targetEntity, false, 0)
                        SET_ENTITY_COORDS(targetEntity, pos2.x + 250, pos2.y + 250, pos2.z, false, true, true, false)
                        targetEntity = nil
                    end
                end
            end
        else
            targetEntity = nil
            util.yield()   
        end

    
end, function ()
    targetEntity = nil
end)

pedclone:action(T('Teleport to me'), {'tpclone'}, T('Teleport the clone you made back to you'), function ()
    local curloc = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0, 1, -1)
    for Clone_player as player do
        GET_ENTITY_COORDS(player)
        SET_ENTITY_COORDS(player, curloc.x, curloc.y, curloc.z, false, true, true, false)
        SET_ENTITY_VISIBLE(player, true)
        SET_ENTITY_COLLISION(player, true, 0)
    end
end)

pedclone:action(T('Delete Clone'), {}, T('Once Deleted you must make a new one'), function ()
    menus.clonemenu.value = false
    func.DelEnt(Clone_player)
end)


local Clone_object = {}
local cloneobjset = {transform = false, sfset = false}
local objclone = appear:list(T('Clone any Object'), {}, '')
objclone:toggle_loop(T('Clone any Object'), {'Obj clone'}, T('Clone yourself to an object'), function ()
    local targetEntity = memory.alloc()

        if GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(players.user(), targetEntity) and not cloneobjset.transform then
            if IS_ENTITY_AN_OBJECT(memory.read_int(targetEntity)) then
                local obj_hash = GET_ENTITY_MODEL(memory.read_int(targetEntity))
                local object
                if IS_MODEL_VALID(obj_hash) then
                    func.Streament(obj_hash)
                    menu.ref_by_path("Self>Appearance>Invisibility>Enabled"):trigger()
                    local pos = GET_ENTITY_COORDS(players.user_ped())
                    object = entities.create_object(obj_hash, pos)
                    table.insert(Clone_object, object)
                end
                for Clone_object as object do
                    while DOES_ENTITY_EXIST(object) do
                        local pos2 = GET_ENTITY_COORDS(players.user_ped())
                        local player_rot = GET_ENTITY_ROTATION(players.user_ped(), 5)
                        SET_ENTITY_INVINCIBLE(object, true)
                        SET_ENTITY_ROTATION(object, player_rot.x, player_rot.y, player_rot.z - 180, false, false, false, false)
                        SET_ENTITY_NO_COLLISION_ENTITY(players.user_ped(), object, false)
                        SET_ENTITY_COORDS(object, pos2.x, pos2.y, pos2.z - 1, false, true, true, false)
                        util.yield()
                    end
                    targetEntity = nil
                end
            end
        elseif func.Is_player_pointing() and cloneobjset.transform then
                memory.write_int(Globals.PlayerPointNoStop, GET_NETWORK_TIME())
                local raycastResult = func.Get_raycast_result(500.0, 16)
                if raycastResult.didHit and DOES_ENTITY_EXIST(raycastResult.hitEntity) then
                    targetEntity = raycastResult.hitEntity
                end
            if IS_ENTITY_AN_OBJECT(targetEntity) then
                local obj_hash = GET_ENTITY_MODEL(targetEntity)
                local object
                if IS_MODEL_VALID(obj_hash) then
                    func.Streament(obj_hash)
                    menu.ref_by_path("Self>Appearance>Invisibility>Enabled"):trigger()
                    local pos = GET_ENTITY_COORDS(players.user_ped())
                    object = entities.create_object(obj_hash, pos)
                    table.insert(Clone_object, object)
                end
                for Clone_object as object do
                    while DOES_ENTITY_EXIST(object) do
                        local pos2 = GET_ENTITY_COORDS(players.user_ped())
                        local player_rot = GET_ENTITY_ROTATION(players.user_ped(), 5)
                        SET_ENTITY_INVINCIBLE(object, true)
                        SET_ENTITY_ROTATION(object, player_rot.x, player_rot.y, player_rot.z - 180, false, false, false, false)
                        SET_ENTITY_NO_COLLISION_ENTITY(players.user_ped(), object, false)
                        SET_ENTITY_COORDS(object, pos2.x, pos2.y, pos2.z - 1, false, true, true, false)
                        util.yield()
                    end
                    targetEntity = nil
                end
            end
        else
            targetEntity = nil
            util.yield()   
        end
end, function ()
    targetEntity = nil
    func.DelEnt(Clone_object)
    menu.ref_by_path('Self>Appearance>Invisibility>Disabled'):trigger()
end)

objclone:action(T('Delete Prop'), {'delprop'}, T('Delete the current prop and revert back to yourself'), function ()
    func.DelEnt(Clone_object)
    menu.ref_by_path('Self>Appearance>Invisibility>Disabled'):trigger()
end)

objclone:toggle(T('Change transformation'), {}, T('Change how you transform from aiming to pointing'), function (on)
    if on then
        cloneobjset.transform = true
    else
        cloneobjset.transform = false
    end
end)

menus.objclone = objclone:list(T('Turn into a prop'), {}, T('Turn yourself into one of the list of props'), function ()
    for Tables.Complete_Object_List as object do
    menus.objclone:action(object.name, {}, T('Turn yourself into one of the list of props'), function ()
        local hash = util.joaat(object.hash)
        func.Streament(hash)
        menu.ref_by_path("Self>Appearance>Invisibility>Enabled"):trigger()
        local pos = GET_ENTITY_COORDS(players.user_ped())
        func.DelEnt(Clone_object)
        if not DOES_ENTITY_EXIST(objectspawn) then
            objectspawn = entities.create_object(hash, pos)
            table.insert(Clone_object, objectspawn)
        end
        for Clone_object as obj do
            while DOES_ENTITY_EXIST(obj) do
                local pos2 = GET_ENTITY_COORDS(players.user_ped())
                local player_rot = GET_ENTITY_ROTATION(players.user_ped(), 5)
                SET_ENTITY_INVINCIBLE(obj, true)
                SET_ENTITY_ROTATION(obj, player_rot.x, player_rot.y, player_rot.z - 180, false, false, false, false)
                SET_ENTITY_NO_COLLISION_ENTITY(players.user_ped(), obj, false)
                SET_ENTITY_COORDS(obj, pos2.x, pos2.y, pos2.z - 1, false, true, true, false)
                util.yield()
            end
        end
    end)
end
end)


menus.objclone:action(T('Delete Prop'), {'delprop'}, T('Delete the current prop and revert back to yourself'), function ()
    func.DelEnt(Clone_object)
    menu.ref_by_path('Self>Appearance>Invisibility>Disabled'):trigger()
end)







 --------------------Pets---------------------------
local pets = {}
local petnames = {}

local function add_pet(name, hash, handle)
    local new_pet = {name=name, hash=hash, handle=handle}
    local pets_list = func.Load_settings(Pets_List)
    for pets_list as pet do
        if pet.handle == new_pet.handle then
            return true
        end
    end
    table.insert(pets_list, new_pet)
    func.Save_settings(Pets_List, pets_list)
    return true
end

local function remove_pet(handle)
    local pets_list = func.Load_settings(Pets_List)
    for index, pet in pets_list do
        if pet.handle == handle then
            pets_list[index] = nil
            func.Save_settings(Pets_List, pets_list)
            return true
        end
    end
    return false
end

local petz = 0
local pets_list_menus = {}
local function regen_pet_list(root)
    local pload = func.Load_settings(Pets_List)
    for pets_list_menus as pets_list_menu do
        if pets_list_menu:isValid() then pets_list_menu:delete() end
    end
    pets_list_menus = {}
    for pload as v do
        if DOES_ENTITY_EXIST(v.handle) then
            local pets_list_menu = root:list(v.name, {}, v.name)
            pets_list_menu:action(Str_trans('Remove from Pet List'), {}, Str_trans('Remove Animal from Pet List'), function ()
                entities.delete_by_handle(v.handle)
                remove_pet(v.handle)
                petz = petz - 1
                if func.set.alert then
                    func.ACutil(v.name..Str_trans(' Removed from Pet List'))
                end
                Spawnedpetmenu:focus()
                return true
            end)
            pets_list_menu:action(Str_trans('Bring to you'), {}, Str_trans('Bring pet to you'), function ()
                local coords = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), math.random(-1, 1), math.random(-1, 1), 0)
                SET_ENTITY_COORDS(v.handle, coords.x, coords.y, coords.z, false, true, true, false)
                if func.set.alert then
                    func.ACutil(v.name..Str_trans(' Pet brought back'))
                end
                return true
            end)
            table.insert(pets_list_menus, pets_list_menu)
        end
    end
end

local saved_pet_list_menus = {}
local function regen_saved_pet_list(root)
    local pload = func.Load_settings(Pets_List)
    for saved_pet_list_menus as saved_pet_list_menu do
        if saved_pet_list_menu:isValid() then saved_pet_list_menu:delete() end
    end
    saved_pet_list_menus = {}
    for pload as v do
        local saved_pet_list_menu = root:list(v.name, {}, v.name)
        saved_pet_list_menu:action(Str_trans('Spawn Pet'), {}, Str_trans('Spawn Pet from saved pet list'), function ()
            pethash = v.hash
            local pos = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0, 1, 0)
            if #pets >= 7 then func.ACutil(Str_trans('Too many pets')) return end
            remove_pet(v.handle)
            local pet = Petcreate(pethash, pos)
            add_pet(v.name, pethash, pet)
            entities.set_can_migrate(entities.handle_to_pointer(pet), false)
            table.insert(pets, pet)
            petz = petz + 1
            Petfollow(pet)
        end)
        saved_pet_list_menu:action(Str_trans('Remove from Pet List'), {}, Str_trans('Remove Animal from Pet List'), function ()
            entities.delete_by_handle(v.handle)
            remove_pet(v.handle)
            petz = petz - 1
            if func.set.alert then
                func.ACutil(v.name..Str_trans(' Removed from Pet List'))
            end
            Spawnedpetmenu:focus()
            return true
        end)
        saved_pet_list_menu:action(Str_trans('Bring to you'), {}, Str_trans('Bring pet to you'), function ()
            local coords = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), math.random(-1, 1), math.random(-1, 1), 0)
            SET_ENTITY_COORDS(v.handle, coords.x, coords.y, coords.z, false, true, true, false)
            if func.set.alert then
                func.ACutil(v.name..Str_trans(' Pet brought back'))
            end
            return true
        end)
        table.insert(saved_pet_list_menus, saved_pet_list_menu)
    end
end

local pethash = 'a_c_chop'


menus.pets = selfroot:list(T('Spawn Pet'), {'spawnpet'}, T('Spawn yourself a pet'))

menus.pets:list_action(T('Spawn Pet'), {}, T('Change the pet you create'), Tables.Petslist, function (petsel)

    pethash = Tables.Petsn[petsel]
    local pos = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0, 1, 0)
    if #pets >= 7 then func.ACutil(Str_trans('Too many pets')) return end
    local pet = Petcreate(pethash, pos)
    entities.set_can_migrate(entities.handle_to_pointer(pet), false)
    table.insert(pets, pet)
    add_pet(Tables.Petslist[petsel], pethash, pet)
    Petfollow(pet)
    menu.trigger_commands('bringpets')

end)

Spawnedpetmenu = menus.pets:list(T('Spawned Pets'), {}, '', function ()
    regen_pet_list(Spawnedpetmenu)
end)

Savedpetmenu = menus.pets:list(T('Saved Pets'), {}, '', function ()
    regen_saved_pet_list(Savedpetmenu)
end)

local respawn_pets = menus.pets:toggle(T('Respawn Pets'), {'respawnpets'}, T('Respawn the pets on your pets list'), function (on)
    if on then
        pload = func.Load_settings(Pets_List)
        pets = {}
        local coor = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0, 1, 0)
        if #pets >= 7 then func.ACutil(Str_trans('Too many pets')) return end
        for pload as v do
            if #pets >= 7 then func.ACutil(Str_trans('Too many pets')) return end
            local pet = Petcreate(v.hash, coor)
            remove_pet(v.handle)
            add_pet(v.name, v.hash, pet)
            table.insert(pets, pet)
            Petfollow(pet)
        end
        io.remove(Pets_List)
        func.Save_settings(Pets_List, pload)
    else
        func.DelEnt(pets)
        petz = 0
        pets = {}
        return
    end
end)



menus.pets:action(T('Bring Pets to you'), {'bringpets'}, T('Bring all the pets you have spawned to you'), function ()
    local coords = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0, 1, 0)
    local pload = func.Load_settings(Pets_List)
    for pload as pet do
        SET_ENTITY_COORDS(pet.handle, coords.x + math.random(-1, 1), coords.y + math.random(-1, 1), coords.z, false, true, true, false)
    end
end)

menus.pets:action(T('Completely Delete Pets'), {'delpets'}, T('Delete all the pets you have spawned'), function ()
    func.DelEnt(pets)
    pets = {}
    petz = 0
    if respawn_pets.value then
        respawn_pets.value = false
    end
end)

menus.pets:list_action(T('Pets Formations'), {}, 'A list of your pets formations', Tables.Bgformationlist, function (index)
    Pet_formation = index - 1
    local pg = GET_PED_GROUP_INDEX(GET_PLAYER_PED_SCRIPT_INDEX(players.user()))
    SET_GROUP_FORMATION(pg, Pet_formation)
end)



-------------------------------------------------------------------------------------------------------


local waterwalkroot = selfroot:list(T('Walk/Drive on Water'), {}, '')
local block
local blocks = {}
local waterwalk = {height = -0.3}
waterwalkroot:toggle_loop(T('Walk/Drive on Water'), {'waterwalk'}, T('Walk or drive on water if you are in the water it will teleport you above it'), function (on)
    local pos, pos2
    local vmod = entities.get_user_vehicle_as_handle()  
    if vmod != 0 then
        pos = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0.0, 0.3, 0)
        pos2 = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0.0, -0.3, 0)
    else
        pos = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(vmod, 0.0, 0.3, 0)
        pos2 = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(vmod, 0.0, -0.3, 0)
    end
    local z = getWaterHeightInclRivers(pos.x, pos.y)
    local z2 = getWaterHeightInclRivers(pos2.x, pos2.y)
    if vmod != 0 then
        SET_VEHICLE_MAX_SPEED(vmod, 150)
        MODIFY_VEHICLE_TOP_SPEED(vmod, 50)
        SET_VEHICLE_BURNOUT(vmod, false)
        SET_IN_ARENA_MODE(true)
        local minimum = memory.alloc()
        local maximum = memory.alloc()
        GET_MODEL_DIMENSIONS(GET_ENTITY_MODEL(vmod), minimum, maximum)
        local maximum_vec = v3.new(maximum)
        local blockh
        if maximum_vec.x >= 3 then
            blockh = util.joaat('sr_prop_special_bblock_mdm3')
       elseif maximum_vec.y >= 3.1 then
            blockh = util.joaat('sr_prop_special_bblock_xl2')
        elseif vmod != 0 and maximum_vec.x >= 0.1 then
            blockh = util.joaat('sr_prop_special_bblock_sml2')
        else
            blockh = util.joaat('sr_prop_special_bblock_sml1')
        end
        func.Streament(blockh)
        local water = memory.alloc(4)
        if block == nil and z != nil then
            block = CREATE_OBJECT(blockh, pos.x, pos.y, z,  true, true, true)
            table.insert(blocks, block)
        elseif z == nil and block != nil then
            if DOES_ENTITY_EXIST(block) then
                func.DelEnt(blocks)
                block = nil
            end
        else
            local pedrot = GET_ENTITY_ROTATION(players.user_ped())
            if z != nil and z2 != nil then
                --local rot = v3.toRot(v3(pos.x - pos2.x, pos.y - pos2.y, z - z2))
                local pitch = math.asin((z - z2) / 0.3)
                SET_ENTITY_COORDS(block, pos.x, pos.y, z + waterwalk.height, false, false, false, false)
                SET_ENTITY_ROTATION(block, pitch * 10, 0, pedrot.z, 2, true)
                local waterped = GET_ENTITY_SUBMERGED_LEVEL(players.user_ped())
                local waterveh = GET_ENTITY_SUBMERGED_LEVEL(vmod)
                for blocks as block do
                	SET_ENTITY_ALPHA(block, 0, false)
            		SET_ENTITY_VISIBLE(block, false, 0)
                end
                if waterped >= 1.0 then
                    SET_ENTITY_COORDS(players.user_ped(), pos.x, pos.y, z + 1, false, false, false, false)
                elseif waterveh >= 1.0  then
                    SET_ENTITY_COORDS(vmod, pos.x, pos.y, z + 1, false, false, false, false)
                end
            else
                func.DelEnt(blocks)
                block = nil 
            end
        end
        return block
    end
end, function ()
    func.DelEnt(blocks)
    block = nil 
end)
waterwalkroot:slider_float(T('Height above water'), {}, T('Adjust the height above or below water'), -90, 90, -30, 10, function (h)
   waterwalk.height = h*0.01
end)



-------------------------------- Teleports---------------------------------------------------
TeleRoot = selfroot:list(T('Teleports'), {}, '')
-- credits to Jerry this is a modified version of his property TP
local ownedprops = {
    {T('Agency'), 826},
    {T('Arcade'), 740},
    {T('Auto shop'), 779},
    {T('Bunker'), 557},
    {T('Cargo Warehouses'), 473},
    {T('CEO Office'), 475},
    {T('Facility'), 590},
    {T('Hangar'), 569},
    {T('MC Clubhouse'), 492,
    mcprops = {T('MC Businesses'), loc = {
        {T('Cocaine Lockup'), 497 },
        {T('Counterfeit Cash'), 500 },
        {T('Document Forgery'), 498 },
        {T('Methamphetamine Lab'), 499 },
        {T('Weed Farm'), 496 },
    }}},
    {T('Night Club'), 614},
    {T('Vehicle Warehouse'), 524}
}

local function getblip(id)
    local blip = 0
    if blip == 0 then
        blip = GET_FIRST_BLIP_INFO_ID(id)
    elseif blip == 0 then
        blip = GET_NEXT_BLIP_INFO_ID(id)
    elseif blip == 0 then
        blip = GET_CLOSEST_BLIP_INFO_ID(id) 
    end
    while blip != 0 do
        local blipColour = GET_BLIP_COLOUR(blip)
        if DOES_BLIP_EXIST(blip) and blipColour != 55 and blipColour != 3 then return blip end
        blip = GET_NEXT_BLIP_INFO_ID(id)
    end
end

local function tpToBlip(blip)
    local pos = GET_BLIP_COORDS(blip)
    local blipColour = GET_BLIP_COLOUR(blip)
    local pblip = GET_FIRST_BLIP_INFO_ID(6)
    local pblipColour = GET_BLIP_COLOUR(pblip)
    if pos.x != 0 then
        SET_ENTITY_COORDS(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
    elseif pblipColour != blipColour then
        func.ACutil(Str_trans('Register as the opposite of CEO/MC to teleport here'))   
    else
        func.ACutil(Str_trans('Coordinates not found'))
    end

end

local properties = {}
local function regenerateTpLocations(root)
    for k, _ in properties do
        properties[k]:delete()
        properties[k] = nil
    end
    for i = 1, #ownedprops do
        local propblip = getblip(ownedprops[i][2])
        if propblip == nil then continue end

        properties[ownedprops[i][1]] = root:action(ownedprops[i][1], {}, '', function()
            if not DOES_BLIP_EXIST(propblip) then
                if func.set.alert then
                    func.ACutil(Str_trans('Could not find property.'))
                end
                return
            end
            tpToBlip(propblip)
        end)
        if ownedprops[i].mcprops then
            local mcprops = ownedprops[i].mcprops
            local listName = mcprops[1]
            properties[listName] = root:list(listName, {}, '')
            for j = 1, #mcprops.loc do
                local mcproploc = getblip(mcprops.loc[j][2])
                if propblip == nil then continue end

                properties[listName]:action(mcprops.loc[j][1], {}, '', function() 
                    if not DOES_BLIP_EXIST(propblip) then
                        if func.set.alert then
                            func.ACutil(Str_trans('Could not find property.'))
                        end
                        return
                    end
                    tpToBlip(mcproploc)
                end)
            end
        end
    end
end

Proptp = TeleRoot:list(T('Property Teleports'), {'tpprop'}, T('Lets you teleport to the properties you own.'), function()
    regenerateTpLocations(Proptp)
end)

menus.acid = TeleRoot:list(T('Acid Lab Helpers'), {'alhelpers'}, '')




menus.acid:action(T('TP into Acid Lab'), {'tplab'},  T('Teleports you into the Acid Lab'), function ()
    local acid = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(840))
    if acid.x ==0 and acid.y ==0 and acid.z ==0 then
        if func.set.alert then
            func.ACutil(Str_trans('Acid Lab not found'))
        end
        if util.is_session_started() then
            if func.set.alert then
                func.ACutil(Str_trans('Calling in Acid Lab'))
            end
            memory.write_uint(Globals.AcidLab, 1) 
            util.yield(8000)
            SET_ENTITY_COORDS(players.user_ped(), 480.80365, -2626.1143, -48.66407, false, false, false, false)
        end
    else    
        SET_ENTITY_COORDS(players.user_ped(), 480.80365, -2626.1143, -48.66407, false, false, false, false)
    end
end)

menus.acid:action(T('TP to Crash Site'), {'tpcrash'}, T('Teleports you to the Crash Site'), function ()
    local objTable = entities.get_all_objects_as_pointers()
    local spill = -1643088134
    local box = 1714593198
    util.yield(250)
    for i = 1, #objTable do
        if entities.get_model_hash(objTable[i]) == spill then
            local h = entities.pointer_to_handle(objTable[i])
            local spill_coor = GET_ENTITY_COORDS(h)
            if spill_coor.x != 0 and spill_coor.y != 0 and spill_coor.z != 0 then
                SET_ENTITY_COORDS(players.user_ped(), spill_coor.x , spill_coor.y + 3, spill_coor.z, false, false, false, false)
            end
            break
        end
    end
    menu.trigger_commands('tpMCproduct')
    util.yield(250)
    for i = 1, #objTable do
        if entities.get_model_hash(objTable[i]) == box then
            local h = entities.pointer_to_handle(objTable[i])
            local box_coor = GET_ENTITY_COORDS(h)
            if box_coor.x != 0 and box_coor.y != 0 and box_coor.z != 0 then
                SET_ENTITY_COORDS(players.user_ped(), box_coor.x, box_coor.y, box_coor.z, false, false, false, false)
            end
            break
        end
    end
    menu.trigger_commands('tplab')
end)         


menus.acid:action(T('TP to Deludamol'), {'tpdelud'}, T('Teleport to the Deludamol Van with the product'), function ()
    local objTable = entities.get_all_objects_as_pointers()
    local vehh = -1776615689
    local delud = 331463704
    for i = 1, #objTable do
        if entities.get_model_hash(objTable[i]) == delud then
            local h = entities.pointer_to_handle(objTable[i])
            local prod_coor = GET_ENTITY_COORDS(h)
            if prod_coor.x != 0 and prod_coor.y != 0 and prod_coor.z != 0 then
                SET_ENTITY_COORDS(players.user_ped(), prod_coor.x, prod_coor.y, prod_coor.z, false, false, false, false)
                for j = 1, #objTable do
                    if entities.get_model_hash(objTable[j]) == vehh then
                        local hv = entities.pointer_to_handle(objTable[j])
                        local driver = GET_PED_IN_VEHICLE_SEAT(hv, -1)
                        if driver != 0 then
                            SET_PED_INTO_VEHICLE(players.user_ped(), hv, -1)
                            util.yield(14000)
                            menu.trigger_commands('wanted')
                            util.yield(1000) 
                            menu.trigger_commands('tpobjective') 
                        else
                            SET_PED_INTO_VEHICLE(players.user_ped(), hv, -1)
                            util.yield(14000)
                            menu.trigger_commands('wanted')
                            util.yield(1000)
                            menu.trigger_commands('tpobjective') 
                        end
                        break
                    end
                end
            end
        end  
    end
end)         

    
menus.acid:action(T('TP Product into Truck'), {'tpfork'}, T('Teleport You and the Product into Truck'), function ()
    local objTable = entities.get_all_objects_as_pointers()
    local product = 414057361
    for i = 1, #objTable do
        if entities.get_model_hash(objTable[i]) == product then
            local h = entities.pointer_to_handle(objTable[i])
            local prod_coor = GET_ENTITY_COORDS(h)
            if prod_coor.x != 0 and prod_coor.y != 0 and prod_coor.z != 0 then
                SET_ENTITY_COORDS(players.user_ped(), prod_coor.x, prod_coor.y, prod_coor.z, false, false, false, false)
            end
            break
        end
    end
    util.yield(750)
    local prod_blip = GET_NEXT_BLIP_INFO_ID(501)
    local prod_ent = GET_BLIP_INFO_ID_ENTITY_INDEX(prod_blip)
    SET_ENTITY_COORDS(prod_ent, 810.2107, -3002.9395, -68.5483, false, false, false, false)
    util.yield(750)
    local vhndle = entities.get_all_vehicles_as_handles()
    for vhndle as hndle do
        local vhash = GET_ENTITY_MODEL(hndle)
        if util.reverse_joaat(vhash) == 'mule4' then
            SET_PED_INTO_VEHICLE(players.user_ped(), hndle, -1)
        end
    end
    util.yield(100)
    SET_CONTROL_VALUE_NEXT_FRAME(0, 71, 1)
    util.yield(2000)
    menu.trigger_commands('tpobjective')

end)      

local blippickups = {535, 536, 537, 538, 539}
menus.acid:action(T('TP to Acid Lab Supplies or Sale'), {'tpacproduct'}, T('Teleport to Acid Lab Product Pickup/Sale'), function ()
    for blippickups as blip do
        local bPickup = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(blip))  
        if bPickup.x == 0 and bPickup.y == 0 and bPickup.z == 0 then

        elseif bPickup.x != 0 and bPickup.y != 0 and bPickup.z != 0 then
            SET_PED_COORDS_KEEP_VEHICLE(players.user_ped(), bPickup.x, bPickup.y, bPickup.z, false, false, false, false)
            if func.set.alert then
                func.ACutil(Str_trans('TP to Sale'))
            end
        end
    end
    local Acidprod_coor
    local pPickup = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(501))
    local objTable = entities.get_all_objects_as_pointers()-- modified from keramiscript
    local chutecord = 2103413525
    local trailer = 1375611915
    local v = {}
    for i = 1, #objTable do
        if entities.get_model_hash(objTable[i]) == chutecord or entities.get_model_hash(objTable[i]) == trailer then
            local h = entities.pointer_to_handle(objTable[i])
            Acidprod_coor = GET_ENTITY_COORDS(h)
            if Acidprod_coor.x == 0 and Acidprod_coor.y == 0 and Acidprod_coor.z == 0 then

            elseif Acidprod_coor.x != 0 and Acidprod_coor.y != 0 and Acidprod_coor.z != 0 then
                if entities.get_model_hash(objTable[i]) == 1375611915 then
                    SET_ENTITY_COORDS(players.user_ped(), Acidprod_coor.x - 3.5, Acidprod_coor.y - 3.5, Acidprod_coor.z, false, false, false, false)
                    menu.trigger_commands('tractor2')


                elseif entities.get_model_hash(objTable[i]) == 2103413525 then
                SET_ENTITY_COORDS(players.user_ped(), Acidprod_coor.x, Acidprod_coor.y, Acidprod_coor.z + 1, false, false, false, false)
                util.yield(100)
                local loopTable = entities.get_all_objects_as_pointers()
                local loop = -1367041250
                for i = 1, #loopTable do
                    if entities.get_model_hash(loopTable[i]) == loop then
                        local l = entities.pointer_to_handle(loopTable[i])
                        local loop_coor = GET_ENTITY_COORDS(l)
                        if loop_coor.x != 0 and loop_coor.y != 0 and loop_coor.z != 0 then
                            local weap = util.joaat('WEAPON_TACTICALRIFLE')
                            for j = 1, 5 do
                                SHOOT_SINGLE_BULLET_BETWEEN_COORDS(loop_coor.x-1, loop_coor.y, loop_coor.z, loop_coor.x + 1, loop_coor.y, loop_coor.z, 200, 0, weap, 0, true, false, 1000)
                            end
                        end
                        break
                    end
                end
                util.yield(1000)
                menu.trigger_commands('tplab')
            end
            if func.set.alert then
                func.ACutil(Str_trans('TP to Van or Product'))
            end
        end
            break
        end
    end
        if  Acidprod_coor == nil then
            menu.trigger_commands('tpobjective')
            util.yield(250)
            menu.trigger_commands('tpobjective')
        else                 
            if func.set.alert then
                func.ACutil(Str_trans('No Acid Lab Product Found'))
            end
        end
end)          


local vteles = TeleRoot:list(T('Vehicle Teleports'), {}, '')

vteles:action(T('TP into Acid Lab'), {'tplab'},  T('Teleports you into the Acid Lab'), function ()
    local acid = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(840))
    if acid.x ==0 and acid.y ==0 and acid.z ==0 then
        if func.set.alert then
            func.ACutil(Str_trans('Acid Lab not found'))
        end
        if util.is_session_started() then
            if func.set.alert then
                func.ACutil(Str_trans('Calling in Acid Lab'))
            end
            memory.write_uint(Globals.AcidLab, 1)
            util.yield(8000)
            SET_ENTITY_COORDS(players.user_ped(), 480.80365, -2626.1143, -48.66407, false, false, false, false)
        end
    else    
        SET_ENTITY_COORDS(players.user_ped(), 480.80365, -2626.1143, -48.66407, false, false, false, false)
    end
end)

vteles:action(T('Return Acid Lab'), {'retacid'}, T('Return Acid Lab to storage'), function ()
    local lab = GET_BLIP_INFO_ID_ENTITY_INDEX(GET_NEXT_BLIP_INFO_ID(840))
    local g = Globals.RetAcidLab
    memory.write_int(g, memory.read_int(g) & ~ (1 << 0))
    memory.write_int(g, memory.read_int(g) | (1 << 1))
    memory.write_int(g, memory.read_int(g) | (1 << 2))
    memory.write_int(g, memory.read_int(g) | (1 << 3))
    memory.write_int(g, memory.read_int(g) | (1 << 4))
    entities.delete_by_handle(lab)
    local gi = Globals.RetAcidLab2
    memory.write_int(gi, memory.read_int(gi) | (1 << 26))
end)

vteles:action(T('TP onto Acid Lab Bike'), {'tpbikelab'},  T('Teleports you onto the Acid Lab Bike'), function ()
    local bikec = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(348))
    local bike = GET_BLIP_INFO_ID_ENTITY_INDEX(GET_NEXT_BLIP_INFO_ID(348))
    if bikec.x ==0 and bikec.y ==0 and bikec.z ==0 then
        if func.set.alert then
            func.ACutil(Str_trans('Acid Lab Bike not found'))
        end
        if util.is_session_started() then
            if func.set.alert then
                func.ACutil(Str_trans('Calling in Acid Lab Bike'))
            end
            memory.write_uint(Globals.AcidBike, 1) 
            util.yield(8000)
            bike = GET_BLIP_INFO_ID_ENTITY_INDEX(GET_NEXT_BLIP_INFO_ID(348))
            SET_PED_INTO_VEHICLE(players.user_ped(), bike, -1)
        end
    else    
        SET_PED_INTO_VEHICLE(players.user_ped(), bike, -1)
    end
end)

vteles:action(T('Return Acid Lab Bike'), {'retbikeacid'}, T('Return Acid Lab Bike to storage'), function ()
    local bike = GET_BLIP_INFO_ID_ENTITY_INDEX(GET_NEXT_BLIP_INFO_ID(348))
    local g = Globals.RetAcidBike
    memory.write_int(g, memory.read_int(g) & ~ (1 << 6))
    memory.write_int(g, memory.read_int(g) | (1 << 8))
    memory.write_int(g, memory.read_int(g) | (1 << 9))
    memory.write_int(g, memory.read_int(g) &~ (1 << 12))
    entities.delete_by_handle(bike)
end)


vteles:action(T('TP into Avenger'), {'tpaven'}, T('Teleport into Avengers holding area'), function ()
    local ave = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(589))
    if ave.x ==0 and ave.y ==0 and ave.z ==0 then
        if func.set.alert then
            func.ACutil(Str_trans('Avenger not found'))
        end
        if util.is_session_started() then
            if func.set.alert then
                func.ACutil(Str_trans('Calling in Avenger'))
            end
            memory.write_uint(Globals.Avenger, 1) -- 
            util.yield(8000)
            SET_ENTITY_COORDS(players.user_ped(), -886.3321, -2769.9875, -48.995987, false, false, false, false)
        end
    else   
        SET_ENTITY_COORDS(players.user_ped(), -886.3321, -2769.9875, -48.995987, false, false, false, false)
    end
end)

vteles:action(T('Return Avenger Facility'), {'retfacilityavenger'}, T('Return Avenger to Facility'), function ()
    local ave = GET_BLIP_INFO_ID_ENTITY_INDEX(GET_NEXT_BLIP_INFO_ID(589))
    local gi = Globals.RetAvengerFac
    memory.write_int(gi, memory.read_int(gi) | (1 << 15))
    memory.write_int(gi, memory.read_int(gi) | (1 << 25))
    util.yield(10)
    memory.write_int(gi, memory.read_int(gi) & ~(1 << 15))
    memory.write_int(gi, memory.read_int(gi) & ~(1 << 25))
    memory.write_int(gi, memory.read_int(gi) | (1 << 6))
    memory.write_int(gi, memory.read_int(gi) | (1 << 3))
    memory.write_int(gi, memory.read_int(gi) | (1 << 4))
    memory.write_int(gi, memory.read_int(gi) | (1 << 9))
    memory.write_int(gi, memory.read_int(gi) & ~ (1 << 8))
    util.yield(10)
    memory.write_int(gi, memory.read_int(gi) & ~(1 << 3))
    entities.delete_by_handle(ave)
end)

vteles:action(T('Return Avenger Hangar'), {'rethangavenger'}, T('Return Avenger to Hangar'), function ()
    local g = Globals.RetAvengerHang1
    local gi = Globals.RetAvengerHang2
    memory.write_int(g, memory.read_int(g) | (1 << 20))
    util.yield(10)
    memory.write_int(g, memory.read_int(g) & ~(1 << 20))
    memory.write_int(gi, memory.read_int(gi) & ~(1 << 6))
    memory.write_int(gi, memory.read_int(gi) | (1 << 3))
    memory.write_int(g, memory.read_int(g) | (1 << 16))
    util.yield(10)
    memory.write_int(gi, memory.read_int(gi) & ~(1 << 3))
end)

vteles:action(T('TP into Avenger Thruster'), {'tpathruster'}, T('Teleport to Avenger Thruster'), function ()
    local thrustc = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(597))
    if thrustc.x == 0 and thrustc.y == 0 and thrustc.z == 0 then
        memory.write_uint(Globals.AvengerThruster, 1)
        func.ACutil(Str_trans('Calling in Avenger Thruster'))
    end
    util.yield(250)
    local sspar = GET_BLIP_INFO_ID_ENTITY_INDEX(GET_NEXT_BLIP_INFO_ID(597))
    SET_PED_INTO_VEHICLE(players.user_ped(), sspar, -1)
    util.yield()
    func.ACutil(Str_trans('Teleporting to Avenger Thruster'))
end)

vteles:action(T('Return Avenger Thruster'), {'retathruster'}, T('Return Avenger Thruster to storage'), function ()
    local avet = GET_BLIP_INFO_ID_ENTITY_INDEX(GET_NEXT_BLIP_INFO_ID(597))
    entities.delete_by_handle(avet)
end)


vteles:action(T('TP into Kosatka'), {'tpkosatka'}, T('Teleport to Kosatka Cayo Perico Heist board'), function ()
    local kos = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(760))
    if kos.x ==0 and kos.y ==0 and kos.z ==0 then
        if func.set.alert then
            func.ACutil(Str_trans('Kosatka not found'))
        end
        if util.is_session_started() then
            if func.set.alert then
                func.ACutil(Str_trans('Calling in Kosatka'))
            end
            memory.write_uint(Globals.Kosatka, 1) 
            util.yield(10000)
            SET_ENTITY_COORDS(players.user_ped(), 1561.1543, 385.98312, -49.68535, false, false, false, false)
        end
    else   
        SET_ENTITY_COORDS(players.user_ped(), 1561.1543, 385.98312, -49.68535, false, false, false, false)
    end
end)

vteles:action(T('Return Kosatka'), {'retkos'}, T('Do NOT be on the Kosatka to Return Kosatka to storage'), function ()
    local kos = GET_BLIP_INFO_ID_ENTITY_INDEX(GET_NEXT_BLIP_INFO_ID(760))
    local g = Globals.RetKosatka1
    memory.write_int(g, memory.read_int(g) | (1 << 28))
    memory.write_int(g, memory.read_int(g) | (1 << 27))
    memory.write_int(g, memory.read_int(g) | (1 << 0))
    memory.write_int(g, memory.read_int(g) & ~(1 << 31))
    entities.delete_by_handle(kos)
    memory.write_int(g, memory.read_int(g) & ~ (1 << 28))
    memory.write_int(g, memory.read_int(g) & ~ (1 << 27))
    memory.write_uint(Globals.RetKosatka2, 1 << 1)
    memory.write_uint(Globals.RetKosatka3,  1 << 0 | 1 << 4)
end)

vteles:action(T('TP into Sea Sparrow'), {'tpssparrow'}, T('Teleport to Kosatka Sea Sparrow'), function ()
    local ssparc = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(753))
    if ssparc.x == 0 and ssparc.y == 0 and ssparc.z == 0 then
        memory.write_uint(Globals.SeaSparrow, 1)
        func.ACutil(Str_trans('Calling in Sea Sparrow'))
    end
    util.yield(250)
    local sspar = GET_BLIP_INFO_ID_ENTITY_INDEX(GET_NEXT_BLIP_INFO_ID(753))
    SET_PED_INTO_VEHICLE(players.user_ped(), sspar, -1)
    util.yield()
    func.ACutil(Str_trans('Teleporting to Sea Sparrow'))
end)

vteles:action(T('Return Sea Sparrow'), {'retssparrow'}, T('Return Sea Sparrow back to Kosatka'), function ()
    local g = Globals.ReturnSeaSparrow
    memory.write_int(g, memory.read_int(g) & ~ (1 << 6)) 
    func.ACutil(Str_trans('Returning Sea Sparrow'))
end)

vteles:action(T('TP into Avisa'), {'tpavisa'}, T('Teleport to Kosatka Avisa'), function ()
    local avisac = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(746))
    if avisac.x == 0 and avisac.y == 0 and avisac.z == 0 then
        memory.write_uint(Globals.Avisa, 1)
        func.ACutil(Str_trans('Calling in Avisa'))
    end
    util.yield(500)
    local avisa = GET_BLIP_INFO_ID_ENTITY_INDEX(GET_NEXT_BLIP_INFO_ID(746))
    SET_PED_INTO_VEHICLE(players.user_ped(), avisa, -1)
end)

vteles:action(T('Return Avisa'), {'retavisa'}, T('Return Avisa back to Kosatka'), function ()
    local g = Globals.RetAvisa
    memory.write_int(g, memory.read_int(g) & ~ (1 << 7))
    func.ACutil(Str_trans('Returning Avisa')) 
end)

vteles:action(T('TP into MOC'), {'tpMOC'}, T('Teleport into MOC command center/bunker'), function ()
    local moc = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(564))
    if moc.x == 0 and moc.y == 0 and moc.z == 0 then
        if func.set.alert then
            func.ACutil(Str_trans('MOC not found'))
        end
        if util.is_session_started() then
            if func.set.alert then
                func.ACutil(Str_trans('Calling in MOC'))
            end
            memory.write_uint(Globals.MOC, 1) 
            util.yield(10000)
            if moc.x != 0 and moc.y != 0 and moc.z != 0 then
                SET_ENTITY_COORDS(players.user_ped(), 1103.3782, -3011.6018, -38.999435, false, false, false, false)
            end
        end
    else 
        SET_ENTITY_COORDS(players.user_ped(), 1103.3782, -3011.6018, -38.999435, false, false, false, false)
    end
end)

vteles:action(T('Return MOC'), {'retMOC'}, T('Return MOC to storage'), function ()
    local MOC = GET_BLIP_INFO_ID_ENTITY_INDEX(GET_NEXT_BLIP_INFO_ID(564))
    local g = Globals.RetMOC1
    memory.write_int(g, memory.read_int(g) | (1 << 6))
    memory.write_int(g, memory.read_int(g) &~ (1 << 5))
    memory.write_int(g, memory.read_int(g) | (1 << 20))
    local gi = Globals.RetMOC2
    memory.write_int(gi, memory.read_int(gi) &~ (1 << 25))
    memory.write_int(gi, memory.read_int(gi) &~ (1 << 20))
    memory.write_int(gi, memory.read_int(gi) | (1 << 8))
    memory.write_int(gi, memory.read_int(gi) &~ (1 << 0))
    entities.delete_by_handle(MOC)
end)

vteles:action(T('TP into Terrorbyte'), {'tpterro'}, T('Teleport to Terrorbyte Business control'), function ()
    local ter = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(632))
    if ter.x == 0 and ter.y == 0 and ter.z == 0 then
        if func.set.alert then
            func.ACutil(Str_trans('Terrorbyte not found'))
        end
        if util.is_session_started() then
            if func.set.alert then
                func.ACutil(Str_trans('Calling in Terrorbyte'))
            end
            memory.write_uint(Globals.Terror, 1) 
            util.yield(10000)
            if ter.x != 0 and ter.y != 0 and ter.z != 0 then
                SET_ENTITY_COORDS(players.user_ped(), -1421.2347, -3012.9988, -79.04994, false, false, false, false)
            end
        end
    else 
        SET_ENTITY_COORDS(players.user_ped(), -1421.2347, -3012.9988, -79.04994, false, false, false, false)
    end
end)

vteles:action(T('Return Terrorbyte'), {'retter'}, T('Return Terrorbyte to storage'), function ()
    local ter = GET_BLIP_INFO_ID_ENTITY_INDEX(GET_NEXT_BLIP_INFO_ID(632))
    local g = Globals.RetTerror
    memory.write_int(g, memory.read_int(g) | (1 << 4))
    memory.write_int(g, memory.read_int(g) | (1 << 5))
    memory.write_int(g, memory.read_int(g) | (1 << 10))
    memory.write_int(g, memory.read_int(g) | (1 << 11))
    entities.delete_by_handle(ter)
    memory.write_int(g, memory.read_int(g) &~ (1 << 11))
    memory.write_int(g, memory.read_int(g) &~ (1 << 0))
    memory.write_int(g, memory.read_int(g) | (1 << 7))
    
end)


local cargoteles = TeleRoot:list(T('CEO Cargo Teleports'), {}, '')

cargoteles:action(T('TP to Special Cargo'), {'tpscargo'}, T('Teleport to Special Cargo pickup'), function ()
    local cPickup = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(478))
    if cPickup.x == 0 and cPickup.y == 0 and cPickup.z == 0 then
        if func.set.alert then
            func.ACutil(Str_trans('No Special Cargo Found'))
        end
    else
        SET_ENTITY_COORDS(players.user_ped(), cPickup.x, cPickup.y, cPickup.z, false, false, false, false)
    end
end)


cargoteles:action(T('TP to Vehicle Cargo'), {'tpvcargo'}, T('Teleport to Vehicle Cargo pickup'), function ()
    local vPickup = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(523))
    if vPickup.x == 0 and vPickup.y == 0 and vPickup.z == 0 then
        if func.set.alert then
            func.ACutil(Str_trans('No Vehicle Cargo Found'))
        end
    else
        SET_ENTITY_COORDS(players.user_ped(), vPickup.x, vPickup.y, vPickup.z, false, false, false, false)
    end
end)

local intteles = TeleRoot:list(T('Interior Teleports'), {}, '')

intteles:action(T('TP to PC'), {'tpdesk'}, T('Teleport to PC at the Desk'), function ()
    local pcD = GET_BLIP_COORDS(GET_FIRST_BLIP_INFO_ID(521))
    if pcD.x != 0 and pcD.y != 0 and pcD.z != 0 then
        SET_ENTITY_COORDS(players.user_ped(), pcD.x- 1.0, pcD.y + 1.0 , pcD.z, false, false, false, false)
    else
        if func.set.alert then
            func.ACutil(Str_trans('No PC Found'))
        end
    end
end)


intteles:action(T('TP to Nightclub Person'), {'tpNCPerson'}, T('Teleport to the Nightclub Person'), function ()
    local nigh1 = GET_BLIP_COORDS(GET_FIRST_BLIP_INFO_ID(143))
    local nigh2 = GET_BLIP_COORDS(GET_FIRST_BLIP_INFO_ID(480))
    if nigh1.x != 0 and nigh1.y != 0 and nigh1.z != 0 then
        SET_ENTITY_COORDS(players.user_ped(), nigh1.x, nigh1.y, nigh1.z, false, false, false, false)
    elseif nigh2.x != 0 and nigh2.y != 0 and nigh2.z != 0 then
        SET_ENTITY_COORDS(players.user_ped(), nigh2.x, nigh2.y, nigh2.z, false, false, false, false)
    else 
        if func.set.alert then
            func.ACutil(Str_trans('No Person Found'))
        end
    end

end)

intteles:action(T('TP to Safe'), {'tpsafe'}, T('Teleport to Safe inside Agency, Arcade, or Nightclub'), function ()
    local saf1 = GET_BLIP_COORDS(GET_FIRST_BLIP_INFO_ID(108))
    local saf2 = GET_BLIP_COORDS(GET_FIRST_BLIP_INFO_ID(207))
    if saf1.x != 0 and saf1.y != 0 and saf1.z != 0 then
        SET_ENTITY_COORDS(players.user_ped(), saf1.x - 1.0, saf1.y + 1.0 , saf1.z, false, false, false, false)
    elseif saf2.x != 0 and saf2.y != 0 and saf2.z != 0 then
        SET_ENTITY_COORDS(players.user_ped(), saf2.x, saf2.y + 1.0 , saf2.z, false, false, false, false)
    else
        if func.set.alert then
            func.ACutil(Str_trans('No Safe Found'))
        end
    end
end)
            

TeleRoot:action(T('TP to MC Product'), {'tpMCproduct'}, T('Teleport to MC Club Product Pickup/Sale'), function ()
    local pPickup = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(501))
    local hPickup = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(64))
    local bPickup = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(427))
    local plPickup = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(423))
    if pPickup.x == 0 and pPickup.y == 0 and pPickup.z == 0 then

    elseif pPickup.x != 0 and pPickup.y != 0 and pPickup.z != 0 then
        SET_ENTITY_COORDS(players.user_ped(), pPickup.x - 1.5, pPickup.y , pPickup.z, false, false, false, false)
        if func.set.alert then
            func.ACutil(Str_trans('TP to MC Product'))
        end
        
    end
    if hPickup.x == 0 and hPickup.y == 0 and hPickup.z == 0 then

    elseif hPickup.x != 0 and hPickup.y != 0 and hPickup.z != 0 then
        SET_ENTITY_COORDS(players.user_ped(), hPickup.x- 1.5, hPickup.y, hPickup.z, false, false, false, false)
        if func.set.alert then
            func.ACutil(Str_trans('TP to Heli'))
        end
    end
    if bPickup.x == 0 and bPickup.y == 0 and bPickup.z == 0 then

    elseif bPickup.x != 0 and bPickup.y != 0 and bPickup.z != 0 then
        SET_ENTITY_COORDS(players.user_ped(), bPickup.x, bPickup.y, bPickup.z + 1.0 , false, false, false, false)
        if func.set.alert then
            func.ACutil(Str_trans('TP to Boat'))
        end
    end
    if plPickup.x == 0 and plPickup.y == 0 and plPickup.z == 0 then

    elseif plPickup.x != 0 and plPickup.y != 0 and plPickup.z != 0 then
        SET_ENTITY_COORDS(players.user_ped(), plPickup.x, plPickup.y + 1.5, plPickup.z - 1, false, false, false, false)
        if func.set.alert then
            func.ACutil(Str_trans('TP to Plane'))
        end
    else                 
        if func.set.alert then
            func.ACutil(Str_trans('No MC Product Found'))
        end
    end
end)

TeleRoot:action(T('TP to Bunker Supplies/Sale'), {'tpBSupplies'}, T('Teleport to Bunker Supplies/Sale Pickup'), function ()
    local sPickup = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(556))
    local dPickup = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(561))
    local fPickup = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(477))
    local plPickup = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(423))
    if sPickup.x == 0 and sPickup.y == 0 and sPickup.z == 0 then
    elseif sPickup.x != 0 and sPickup.y != 0 and sPickup.z != 0 then
        SET_ENTITY_COORDS(players.user_ped(), sPickup.x, sPickup.y + 2.0, sPickup.z - 1.0, false, false, false, false)
        if func.set.alert then
            func.ACutil(Str_trans('TP to Supplies'))
        end
    end
    if dPickup.x == 0 and dPickup.y == 0 and dPickup.z == 0 then
    elseif dPickup.x != 0 and dPickup.y != 0 and dPickup.z != 0 then
        SET_ENTITY_COORDS(players.user_ped(), dPickup.x, dPickup.y, dPickup.z, false, false, false, false)
        if func.set.alert then
            func.ACutil(Str_trans('TP to Dune'))
        end
    end
    if fPickup.x == 0 and fPickup.y == 0 and fPickup.z == 0 then
    elseif fPickup.x != 0 and fPickup.y != 0 and fPickup.z != 0 then
        SET_ENTITY_COORDS(players.user_ped(), fPickup.x, fPickup.y, fPickup.z + 1.0 , false, false, false, false)
        if func.set.alert then
            func.ACutil(Str_trans('TP to Flatbed'))
        end
    else
         if func.set.alert then
            func.ACutil(Str_trans('No Bunker Supplies Found'))
         end
    end
end)

TeleRoot:action(T('TP to Payphone'), {'tppayphone'}, T('Teleport to Payphone (must have called Franklin already)'), function ()
    local payPhon = GET_BLIP_COORDS(GET_NEXT_BLIP_INFO_ID(817))
    if payPhon.x == 0 and payPhon.y == 0 and payPhon.z == 0 then
        if func.set.alert then
            func.ACutil(Str_trans('No Payhone Found'))
        end
    else
        SET_ENTITY_COORDS(players.user_ped(), payPhon.x, payPhon.y, payPhon.z + 1, false, false, false, false)
    end
end)

TeleRoot:action(T('TP to Exotic Export Dock'), {'tpEED'}, T('Teleport to Exotic Export Dock'), function ()
    if DOES_BLIP_EXIST(GET_CLOSEST_BLIP_INFO_ID(780)) then
        local eDock = GET_BLIP_COORDS(GET_CLOSEST_BLIP_INFO_ID(780))
        if eDock.x == 0 and eDock.y == 0 and eDock.z == 0 then
            if func.set.alert then
                func.ACutil(Str_trans('Dock Not Found'))
            end
        elseif eDock.x != 0 and eDock.y != 0 and eDock.z != 0 then
            SET_PED_COORDS_KEEP_VEHICLE(players.user_ped(), 1169.5736, -2971.932, 5.9021106)
        end
    end
end)



local forwteles = TeleRoot:list(T('TP Forward Teleports'), {}, '')

local forw = {amount = 0.5}
forwteles:action(T('TP Foward'), {'tpforw'}, T('Teleport Forward your set amount'), function ()
    if IS_PED_IN_ANY_VEHICLE(players.user_ped(), false) then
        return
    end
    local fv = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0, forw.amount, -1.0)
        SET_ENTITY_COORDS(players.user_ped(), fv.x , fv.y, fv.z, false, false, false, false)
end)

 forwteles:toggle_loop(T('TP Foward Toggle'), {}, T('Teleport Forward toggle for your gamepad RB and DPAD Down'), function ()
    local fv = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0, forw.amount, -1.0)
    if IS_PED_IN_ANY_VEHICLE(players.user_ped(), false) then
        return
    end
    if IS_CONTROL_PRESSED(0, 187) or IS_CONTROL_PRESSED(0, 47) or IS_CONTROL_PRESSED(0, 19) and IS_CONTROL_PRESSED(0, 44) then
        SET_ENTITY_COORDS(players.user_ped(), fv.x , fv.y, fv.z, false, false, false, false)
    else util.yield()
    end
    util.yield(250)
end)

forwteles:slider_float(T('TP Forward Amount'), {'tpslider'}, T('Adjust the amount you teleport forward by'), 10, 100000, 50, 10, function (s)
    forw.amount = s*0.01
end)


TeleRoot:toggle_loop(T('Levitate Toggle'), {}, T('Levitate toggle for your gamepad RB and DPAD Down'), function ()
    local fv = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0, forw.amount, -1.0)
    if IS_PED_IN_ANY_VEHICLE(players.user_ped(), false) then
        return
    end
    if  IS_CONTROL_PRESSED(0, 44) then
        if IS_CONTROL_PRESSED(0, 187) or IS_CONTROL_PRESSED(0, 47) or IS_CONTROL_PRESSED(0, 19) then
            menu.trigger_commands('levitate')
        end
    end
    util.yield(250)
end)




 ------------------------------------------

local ujmpmenu = selfroot:list(T('Ultra Jump'), {}, '')

Jump = {height = 0.6 }
ujmpmenu:toggle_loop(T('Ultra Jump'), {}, T('Keep going higher the longer you press jump (can also be used to fly)'), function ()
    if IS_CONTROL_PRESSED(0, 22) or IS_CONTROL_JUST_PRESSED(0, 21) then
        SET_PED_CAN_RAGDOLL(players.user_ped(), false)
        APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(players.user_ped(), 1, 0.0, 0.6, Jump.height, 0, 0, 0, 0, true, true, true, true)
        if IS_ENTITY_IN_AIR(players.user_ped()) then
            APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(players.user_ped(), 1, 0.0, 0.6, Jump.height, 0, 0, 0, 0, true, true, true, true)
        end
    end
end)

ujmpmenu:slider(T('Ultra Jump Amount'), {}, T('Adjust the amount you move upwards by'), 6, 1000, 6, 1, function (a)
    Jump.height = a*0.1
end)

 local function add_deathlog(name, time, weapon)
    local file, errmsg = io.open(Death_Log, "a+")
    if not file then
        return false, errmsg
    end
    file:write(json.stringify(name..' '..time..' with '..weapon, nil, 0, false)..'\n')
    file:close()
    return input, true
end


 menus.deathlog = selfroot:list(Str_trans('Death Log'), {}, Str_trans('Log who kills you'))

 local deathlogtable ={}
 menus.deathlog:toggle_loop(Str_trans('Death Log'), {'deathlog'}, Str_trans('Log who kills you'), function (on)
    if IS_PED_DEAD_OR_DYING(players.user_ped()) then
        killer = GET_PED_SOURCE_OF_DEATH(players.user_ped())
        if killer == players.user_ped() then return end
        if IS_MODEL_A_PED(GET_ENTITY_MODEL(killer)) then
            local pid = NETWORK_GET_PLAYER_INDEX_FROM_PED(killer)
            local pname = players.get_name(pid)
            local ts = os.time()
            local time = os.date('%Y-%m-%d %H:%M:%S', ts)
            if pname != nil then
                add_deathlog(pname, time, 'weapon')
            end
            if func.set.alert then
                func.ACutil(pname..Str_trans(' Added to Death Log via weapon'))
            end
            util.yield(12000)
        elseif IS_MODEL_A_VEHICLE(GET_ENTITY_MODEL(killer)) then
            local vehowner = entities.get_owner(entities.handle_to_pointer(killer))
            local pname = players.get_name(vehowner)
            local ts = os.time()
            local time = os.date('%Y-%m-%d %H:%M:%S', ts)
            if pname != nil then
                add_deathlog(pname, time, 'vehicle')
            end
            if func.set.alert then
                func.ACutil(pname..Str_trans(' Added to Death Log via vehicle'))
            end
            util.yield(12000)
        end
    end
end)

menus.deathlog:action(T('Open Death Log Folder'), {}, T('Open folder containing death log'), function ()
    util.open_folder(SettingsDir)
end)

menus.deathlog:action(T('Clear Death Log'), {}, T('Deletes current death log to start a new one'), function ()
    io.remove(Death_Log)
end)



selfroot:toggle_loop(T('Money Trail'), {}, T('Everywhere you walk fake money appears'), function ()
    local tar1 = GET_ENTITY_COORDS(players.user_ped(), true)
    func.Streamptfx('scr_exec_ambient_fm')
    if func.Player_moving(players.user_ped()) then
        START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD('scr_ped_foot_banknotes', tar1.x, tar1.y, tar1.z - 1, 0, 0, 0, 1.0, true, true, true)
    end
    
end)


selfroot:toggle_loop(T('Turn Radio Off'), {'radoff'}, T('Turn off the radio completely(only for you)'), function ()
    local veh = GET_VEHICLE_PED_IS_IN(players.user_ped())
    if IS_PED_IN_ANY_VEHICLE(players.user_ped(), false) then
        SET_VEHICLE_RADIO_ENABLED(veh, false)
        util.yield()
    end
end, function ()
    local veh = GET_VEHICLE_PED_IS_IN(players.user_ped())
    SET_VEHICLE_RADIO_ENABLED(veh, true)
end)
return menus