   --credits to Hexarobi for more help with the script than anyone they are always helping me and let me use their Language library
   --credits to Jerry123 for major help with multiple portions of the script and his LangLib for the template maker
   --credits to Sapphire for the help in programming they are the real MVP for helping everyone
   --credits to Vsus and ghozt for pointing me in the right direction
   --credits to Nowiry for their script it was a heavy influence on the Charger and Lazer Space Docker weapons
   --credits to aaronlink127#0127 for the ScaleformLib script and help with executing it
   --Script made by acjoker8818
   -------------------------------------------------------------------------
util.keep_running()
local LOADING_START = util.current_time_millis()
local scripts_dir = filesystem.scripts_dir()

local yieldlib = require "resources.AcjokerScript.Modules.Scaleform"
yieldlib.init()
util.ensure_package_is_installed("natives-1681379138")
local requirements = {
    modules = {
        "natives-1681379138.g",
        "resources.AcjokerScript.translations",
        "resources.AcjokerScript.gizmoUtils",
        "resources.AcjokerScript.Modules.Self",
        "resources.AcjokerScript.Modules.Weapons",
        "resources.AcjokerScript.Modules.Vehicles",
        "resources.AcjokerScript.Modules.Online",
		"resources.AcjokerScript.Modules.Bodyguards",
        "resources.AcjokerScript.Modules.Players",
        "resources.AcjokerScript.Modules.Scaleform",
        'resources.AcjokerScript.Modules.Settings',
    },
    modules_names = {
	    "'natives-1681379138 module'",
        "'translations module'",
        "'gizmoUtils module'",
        "'self module'",
        "'weapons module'",
        "'vehicles module'",
        "'online module'",
        "'bodyguards module'",
		"'players module'",
        "'scaleform module'",
        "'settings module'",
    }
}

do
    local backup = package.path
    package.path = ""
    
    local script_modules = $"{scripts_dir}/resources/AcjokerScript/Modules"
    
    package.path = package.path .. ";" .. script_modules .. "/?.pluto"
    
    package.path = package.path .. ";" .. backup
    backup = nil
end

util.ensure_package_is_installed("lua/ScaleformLib")

for i, mod in requirements.modules do
    package.loaded[mod] = nil
    xpcall(
        function()
            local required_mod = require(mod)
        end,
        function(err)
            local failed_mod_name = requirements.modules_names[i]
            util.toast($"Failed to load: {failed_mod_name}. Check the log for more info")
            util.log($"[AcjokerScript]: Failed to load a module ({failed_mod_name}), error: {err}")
        end
    )
end

local my = menu.my_root()
my:action(T('Player Options'), {}, T('Redirects you to the Player list in Stand for the Trolling and Friendly options'), function ()
	menu.ref_by_path("Players"):trigger()
end)


util.create_thread(function () 
	if SCRIPT_MANUAL_START and not SCRIPT_SILENT_START then--credits to Hexarobi
		local logo_path = filesystem.resources_dir() .. 'AcjokerScript\\' ..'intrologo.png'
		local logo_status, logo = pcall(directx.create_texture, logo_path)
		if not logo_status then
			debug_log("Failed to load AcjokerScript logo "..tostring(logo))
			return
		end
		local rgb = {color= {r= 0, g = 1, b = 0, a = 1}}
		local fade_steps = 50
		for i = 0, fade_steps do
			directx.draw_texture(logo, 0.2, 0.2, 0.5, 0.5, 0.5, 0.55, 0, 1, 1, 1, i/fade_steps)
			directx.draw_text(0.5, 0.8, "0.32.9", ALIGN_CENTRE, 2.0, rgb.color.r, rgb.color.g, rgb.color.b, rgb.color.a/fade_steps/2)
			util.yield()
		end
		for i = 0, 100 do
			directx.draw_texture(logo, 0.2, 0.2, 0.5, 0.5, 0.5, 0.55, 0, 1, 1, 1, 1)
			directx.draw_text(0.5, 0.8, "0.32.9", ALIGN_CENTRE, 2.0, rgb.color)
			util.yield()
		end
		for i = fade_steps,0,-1 do
			directx.draw_text(0.5, 0.8, "0.32.9", ALIGN_CENTRE, 2.0, rgb.color.r, rgb.color.g, rgb.color.b, rgb.color.a/fade_steps)
			directx.draw_texture(logo, 0.2, 0.2, 0.5, 0.5, 0.5, 0.55, 0, 1, 1, 1, i/fade_steps/2)
			util.yield()
		end
	end
	util.stop_thread()
end)



LOADING_SCRIPT = false
if Template and not LOADING_SCRIPT then
	EndTranslate()
end

print('Loaded AcjokerScript in '.. util.current_time_millis() - LOADING_START ..' ms.')
